name: Build (Internal)
on:
  workflow_call:
    inputs:
      cmake-args:
        description: Additional arguments to pass to CMake.
        type: string
        required: false
      core-name:
        description: The name of the core.
        type: string
        required: false
        default: melondsds_libretro
      cores-dir:
        description: The directory in which to place the built cores.
        type: string
        required: false
        default: cores
      info-dir:
        description: The directory in which to place the built info files.
        type: string
        required: false
        default: cores
      runs-on:
        description: The platform on which the workflow will be run. Passed directly to jobs.<job_id>.runs-on.
        type: string
        required: true
      shell:
        description: The shell to use for running commands. Passed directly to jobs.<job_id>.defaults.run.shell.
        type: string
        required: false
        default: bash
      build-dir:
        description: The directory in which to build the project.
        type: string
        required: false
        default: "build"
      dist-dir:
        description: The directory in which to place the built artifacts.
        type: string
        required: false
        default: "build/dist"
      lib-ext:
        description: The extension of the library to build.
        type: string
        required: true
      archive-name:
        description: The name of the archive to upload.
        type: string
        required: true
      target:
        description: The platform target.
        type: string
        required: true
      test-suite:
        description: Whether there will be a test suite based on this run's output
        type: boolean
        required: false
        default: false
env:
  BUILD_DIR: "${{ github.workspace }}/${{ inputs.build-dir }}"
  DIST_DIR: "${{ github.workspace }}/${{ inputs.dist-dir }}"
jobs:
  build:
    strategy:
      matrix:
        build-type:
          - Debug
          - Release
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        shell: ${{ inputs.shell }}
    steps:
      - name: Check Out Source
        uses: actions/checkout@v4

      - name: Install GCC Problem Matcher
        uses: root-project/gcc-problem-matcher-improved@9d83f12b27a78210f0485fb188e08d94fa807a6d
        if: ${{ runner.os != 'Windows' }} # See https://github.com/root-project/gcc-problem-matcher-improved/issues/3
        with:
          build-directory: ${{ env.BUILD_DIR }}

      - name: Install Dependencies
        uses: ./.github/actions/deps
        with:
          target: ${{ inputs.target }}

      - name: Create build environment
        run: mkdir -vp "${{ env.BUILD_DIR }}"

      - name: Configure
        working-directory: "${{ env.BUILD_DIR }}"
        run: |
          cmake "${{ github.workspace }}" \
            -DCMAKE_BUILD_TYPE="${{ matrix.build-type }}" \
            ${{ inputs.cmake-args }}

      - name: Build
        working-directory: "${{ env.BUILD_DIR }}"
        run: cmake --build "${{ env.BUILD_DIR }}" --parallel

      - name: Prepare Artifact Directory
        env:
          CORES_PATH: "${{ env.DIST_DIR }}/${{ inputs.cores-dir }}"
          INFO_PATH: "${{ env.DIST_DIR }}/${{ inputs.info-dir }}"
        run: |
          mkdir -vp "$CORES_PATH" "$INFO_PATH"
          cp -f "${{ env.BUILD_DIR }}/src/libretro/${{ inputs.core-name }}.${{ inputs.lib-ext }}" "$CORES_PATH"
          cp -f "${{ env.BUILD_DIR }}/melondsds_libretro.info" "$INFO_PATH/${{ inputs.core-name }}.info"
          cp -f "${{ env.BUILD_DIR }}/melondsds-LICENSE.txt" "$CORES_PATH"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: "${{ inputs.archive-name }}-${{ matrix.build-type }}"
          if-no-files-found: error
          path: "${{ env.DIST_DIR }}"

      - name: Remove Extra Artifacts
        if: ${{ matrix.build-type == 'Debug' && inputs.test-suite }}
        run: |
          rm -rf "${{ env.BUILD_DIR }}/_deps" "${{ env.BUILD_DIR }}/src/libretro/CMakeFiles"
        # Remove various files that we won't need to pass to the test suite

      - name: Upload CMake Build Directory
        uses: actions/upload-artifact@v3
        if: ${{ matrix.build-type == 'Debug' && inputs.test-suite }}
        with:
          name: "zzz-not-for-players-cmake-build-${{ inputs.archive-name }}-${{ matrix.build-type }}"
          # So no one tries to download this on nightly.link
          if-no-files-found: error
          path: "${{ env.BUILD_DIR }}"